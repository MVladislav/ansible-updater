---
# tasks file for ./roles/updater

# ------------------------------------------------------------------------------
- name: >
    UPDATER | lang | ensure language packages are installed for
    'language-pack-*' and 'language-pack-*-base' with * as defined
  become: true
  ansible.builtin.apt:
    pkg: "{{ item }}"
    state: present
    force_apt_get: true # apt-get instead of aptitude
    update_cache: true
  with_items:
    - "language-pack-{{ updater_config_system_locale.split('_')[0] }}"
    - "language-pack-{{ updater_config_system_locale.split('_')[0] }}-base"
    - "language-pack-gnome-{{ updater_config_system_locale.split('_')[0] }}"
    - "language-pack-gnome-{{ updater_config_system_locale.split('_')[0] }}-base"
  register: locale_languages
  when: outer_item.locale is defined
  tags:
    - updater
    - system_local

- name: "UPDATER | lang | ensure dpkg is reconfigured"
  become: true
  ansible.builtin.command: dpkg-reconfigure locales -f noninteractive
  changed_when: false
  when: locale_languages is defined and locale_languages.changed
  tags:
    - updater
    - system_local

# ------------------------------------------------------------------------------
- name: "UPDATER | lang | ensure localization files are available for system local"
  become: true
  community.general.locale_gen:
    name: "{{ updater_config_system_locale }}"
    state: present
  tags:
    - updater
    - system_local

- name: "UPDATER | lang | ensure localization files are available for system language"
  become: true
  community.general.locale_gen:
    name: "{{ updater_config_system_language }}"
    state: present
  tags:
    - updater
    - system_local

# ------------------------------------------------------------------------------
- name: "UPDATER | lang | get current locale and language configuration"
  become: true
  ansible.builtin.command: localectl status
  register: locale_status
  changed_when: false
  tags:
    - updater
    - system_local

# ------------------------------------------------------------------------------
- name: "UPDATER | lang | parse 'LANG' from current locale and language configuration"
  become: true
  ansible.builtin.set_fact:
    locale_lang: "{{ locale_status.stdout | regex_search('LANG=([^\n]+)', '\\1') | default([''], true) | first }}"
  when:
    - locale_status is defined
    - locale_status.stdout is defined
    - locale_status.stdout | length > 0
  tags:
    - updater
    - system_local

- name: "UPDATER | lang | parse 'LANGUAGE' from current locale and language configuration"
  become: true
  ansible.builtin.set_fact:
    locale_language: "{{ locale_status.stdout | regex_search('LANGUAGE=([^\n]+)', '\\1') | default([locale_lang], true) | first }}"
  when:
    - locale_status is defined
    - locale_status.stdout is defined
    - locale_status.stdout | length > 0
  tags:
    - updater
    - system_local

# ------------------------------------------------------------------------------
- name: "UPDATER | lang | set LANG and LANGUAGE"
  become: true
  ansible.builtin.command: "localectl set-locale LANG={{ updater_config_system_locale }} LANGUAGE={{ updater_config_system_language }}"
  changed_when: locale_lang != updater_config_system_locale or locale_language != updater_config_system_language
  tags:
    - updater
    - system_local
