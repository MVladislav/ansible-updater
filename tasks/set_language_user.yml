---
# tasks file for ./roles/updater

# ------------------------------------------------------------------------------
- name: >
    UPDATER | lang | ensure language packages are installed for
    'language-pack-*' and 'language-pack-*-base' with * as defined
  become: true
  ansible.builtin.apt:
    name:
      - "language-pack-{{ outer_item.locale.split('_')[0] }}"
      - "language-pack-{{ outer_item.locale.split('_')[0] }}-base"
      - "language-pack-gnome-{{ outer_item.locale.split('_')[0] }}"
      - "language-pack-gnome-{{ outer_item.locale.split('_')[0] }}-base"
    state: present
    force_apt_get: true # apt-get instead of aptitude
    update_cache: true
  register: updater_chg_user_locale_languages
  when: outer_item.locale is defined
  tags:
    - updater
    - system_local_user

- name: "UPDATER | lang | ensure dpkg is reconfigured"
  become: true
  ansible.builtin.command: dpkg-reconfigure locales -f noninteractive
  changed_when: false
  when: updater_chg_user_locale_languages is defined and updater_chg_user_locale_languages.changed
  tags:
    - updater
    - system_local_user

# ------------------------------------------------------------------------------
- name: "UPDATER | lang | ensure localization files for specified language are available"
  become: true
  community.general.locale_gen:
    name: "{{ outer_item.locale }}"
    state: present
  tags:
    - updater
    - system_local_user

- name: "UPDATER | lang | ensure localization files for specified language are available"
  become: true
  community.general.locale_gen:
    name: "{{ outer_item.language }}"
    state: present
  tags:
    - updater
    - system_local_user

# ------------------------------------------------------------------------------
- name: "UPDATER | lang | get current locale and language configuration"
  become: true
  become_user: "{{ outer_item.name }}"
  ansible.builtin.command: locale
  register: locale_status
  changed_when: false
  tags:
    - updater
    - system_local_user

- name: "UPDATER | lang | parse 'LANG' from current locale and language configuration"
  become: true
  become_user: "{{ outer_item.name }}"
  ansible.builtin.set_fact:
    locale_lang: "{{ locale_status.stdout | regex_search('LANG=([^\n]+)', '\\1') | default([''], true) | first }}"
  when:
    - locale_status is defined
    - locale_status.stdout is defined
    - locale_status.stdout | length > 0
  tags:
    - updater
    - system_local_user

- name: "UPDATER | lang | parse 'LANGUAGE' from current locale and language configuration"
  become: true
  become_user: "{{ outer_item.name }}"
  ansible.builtin.set_fact:
    locale_language: "{{ locale_status.stdout | regex_search('LANGUAGE=([^\n]+)', '\\1') | default([locale_lang], true) | first }}"
  when:
    - locale_status is defined
    - locale_status.stdout is defined
    - locale_status.stdout | length > 0
  tags:
    - updater
    - system_local_user

# ------------------------------------------------------------------------------
- name: "UPDATER | lang | ensure file '~/.pam_environment' exists"
  become: true
  become_user: "{{ outer_item.name }}"
  ansible.builtin.copy:
    content: ""
    dest: "~/.pam_environment"
    force: false
    group: "{{ outer_item.name }}"
    owner: "{{ outer_item.name }}"
    mode: "0660"
  tags:
    - updater
    - system_local_user

- name: "UPDATER | lang | set language env variables in '~/.pam_environment'"
  become: true
  become_user: "{{ outer_item.name }}"
  ansible.builtin.lineinfile:
    dest: "~/.pam_environment"
    state: present
    regexp: "^{{ item.key }}(.*)="
    line: "{{ item.key }} {{ item.value }}"
  with_items:
    - key: LC_CTYPE
      value: "DEFAULT={{ outer_item.locale }}"
    - key: LC_ALL
      value: "DEFAULT={{ outer_item.locale }}"
    - key: LANGUAGE
      value: "DEFAULT={{ outer_item.locale.split('.')[0] }}:{{ outer_item.locale.split('_')[0] }}"
    - key: LANG
      value: "DEFAULT={{ outer_item.locale }}"
    - key: LC_NUMERIC
      value: "DEFAULT={{ outer_item.locale }}"
    - key: LC_TIME
      value: "DEFAULT={{ outer_item.locale }}"
    - key: LC_MONETARY
      value: "DEFAULT={{ outer_item.locale }}"
    - key: LC_PAPER
      value: "DEFAULT={{ outer_item.locale }}"
    - key: LC_NAME
      value: "DEFAULT={{ outer_item.locale }}"
    - key: LC_ADDRESS
      value: "DEFAULT={{ outer_item.locale }}"
    - key: LC_TELEPHONE
      value: "DEFAULT={{ outer_item.locale }}"
    - key: LC_MEASUREMENT
      value: "DEFAULT={{ outer_item.locale }}"
    - key: LC_IDENTIFICATION
      value: "DEFAULT={{ outer_item.locale }}"
    - key: PAPERSIZE
      value: "DEFAULT=a4"
  tags:
    - updater
    - system_local_user

- name: "UPDATER | lang | remove conf file for user-dirs.* and recreate"
  become: true
  become_user: "{{ outer_item.name }}"
  ansible.builtin.shell: set -o pipefail && rm ~/.config/user-dirs.{dirs,locale} ; xdg-user-dirs-update --force
  when: locale_lang != outer_item.locale or locale_language != outer_item.language
  register: language_rm_user_dirs
  changed_when: language_rm_user_dirs.rc is defined and language_rm_user_dirs.rc == 0
  failed_when: language_rm_user_dirs.rc is defined and language_rm_user_dirs.rc == 999
  tags:
    - updater
    - system_local_user

# ------------------------------------------------------------------------------
- name: "UPDATER | lang | ensure dpkg is reconfigured"
  become: true
  ansible.builtin.command: dpkg-reconfigure locales -f noninteractive
  changed_when: false
  when: locale_lang != outer_item.locale or locale_language != outer_item.language
  tags:
    - updater
    - system_local_user
