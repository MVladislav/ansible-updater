---
# tasks file for ./roles/updater

# ------------------------------------------------------------------------------
- name: updater - install dependencies
  become: true
  ansible.builtin.apt:
    pkg: "{{ item }}"
    state: present
    force_apt_get: true # apt-get instead of aptitude
  loop: "{{ updater_dependencies|flatten(levels=1) }}"
  when: updater_config.set_timezone is defined and updater_config.set_timezone | bool
  tags:
    - updater
    - dependencies

# ------------------------------------------------------------------------------
# SET TIMEZONE
- name: set timezone
  include_tasks: set_timezone.yml
  when: updater_config.set_timezone is defined and updater_config.set_timezone | bool

# SYNC TIME
- name: sync time
  include_tasks: sync_time.yml
  when: updater_config.sync_time is defined and updater_config.sync_time | bool

# SET LANGUAGE
- name: set language
  include_tasks: set_language.yml
  when: updater_config.set_language is defined and updater_config.set_language | bool

- name: set language per user
  include_tasks: set_language_user.yml
  loop: "{{ clients | flatten(levels=1) }}"
  loop_control:
    loop_var: outer_item
  when: >
    (clients is defined and (outer_item.locale is defined or outer_item.language is defined))
    and (updater_config.set_language is defined and updater_config.set_language | bool)

# ------------------------------------------------------------------------------
- name: updater - update repositories
  become: true
  ansible.builtin.apt:
    update_cache: true # equivalent of apt-get update
    force_apt_get: true # apt-get instead of aptitude
    cache_valid_time: 3600
    autoremove: true
    autoclean: true
  when: updater_config.update_upgrade is defined and updater_config.update_upgrade | bool
  tags:
    - updater
    - update

- name: updater - upgrade packages
  become: true
  ansible.builtin.apt:
    upgrade: dist # If yes or safe, performs an aptitude safe-upgrade.
    force_apt_get: true # apt-get instead of aptitude
  when: updater_config.update_upgrade is defined and updater_config.update_upgrade | bool
  tags:
    - updater
    - upgrade

# # ------------------------------------------------------------------------------
# - name: "updater - add /etc/systemd/timesyncd.conf"
#   become: true
#   ansible.builtin.copy:
#     dest: /etc/systemd/timesyncd.conf
#     content: |
#       #  This file is part of systemd.
#       #
#       #  systemd is free software; you can redistribute it and/or modify it
#       #  under the terms of the GNU Lesser General Public License as published by
#       #  the Free Software Foundation; either version 2.1 of the License, or
#       #  (at your option) any later version.
#       #
#       # Entries in this file show the compile time defaults.
#       # You can change settings by editing this file.
#       # Defaults can be restored by simply deleting this file.
#       #
#       # See timesyncd.conf(5) for details.

#       [Time]
#       NTP={{ updater_ntp_server }}
#       FallbackNTP={{ updater_ntp_fallback_server }}
#       #NTP=0.de.pool.ntp.org 1.de.pool.ntp.org 2.de.pool.ntp.org
#       #FallbackNTP=0.arch.pool.ntp.org 1.arch.pool.ntp.org 2.arch.pool.ntp.org 3.arch.pool.ntp.org
#       #RootDistanceMaxSec=5
#       #PollIntervalMinSec=32
#       #PollIntervalMaxSec=2048
#   register: systemd_timesyncd
#   tags:
#     - updater
#     - timesyncd

# - name: restart systemd-timesyncd
#   become: true
#   service:
#     name: systemd-timesyncd
#     state: restarted
#     enabled: true
#   when: systemd_timesyncd is defined and (systemd_timesyncd.changed is defined and systemd_timesyncd.changed | bool)

# ------------------------------------------------------------------------------
# SETUP NTP by chrony

# ------------------------------------------------------------------------------
# CHECK IF SERVICE INSTALLED
- name: "updater - check if service chrony installed"
  become: true
  ansible.builtin.shell: set -o pipefail && command -v chrony >/dev/null 2>&1
  args:
    executable: /bin/bash
  register: is_chrony_exist
  ignore_errors: true
  changed_when: is_chrony_exist is defined and is_chrony_exist.rc != 0
  tags:
    - install_client
    - chrony

- name: "updater - add /etc/chrony/chrony.conf"
  become: true
  ansible.builtin.copy:
    dest: /etc/chrony/chrony.conf
    mode: 0644
    content: |
      # This the default chrony.conf file for the Debian chrony package.  After
      # editing this file use the command 'invoke-rc.d chrony restart' to make
      # your changes take effect.  John Hasler <jhasler@debian.org> 1998-2008

      # See www.pool.ntp.org for an explanation of these servers.  Please
      # consider joining the project if possible.  If you can't or don't want to
      # use these servers I suggest that you try your ISP's nameservers.  We mark
      # the servers 'offline' so that chronyd won't try to connect when the link
      # is down.  Scripts in /etc/ppp/ip-up.d and /etc/ppp/ip-down.d use chronyc
      # commands to switch it on when a dialup link comes up and off when it goes
      # down.  Code in /etc/init.d/chrony attempts to determine whether or not
      # the link is up at boot time and set the online status accordingly.  If
      # you have an always-on connection such as cable omit the 'offline'
      # directive and chronyd will default to online.
      #
      # Note that if Chrony tries to go "online" and dns lookup of the servers
      # fails they will be discarded.  Thus under some circumstances it is
      # better to use IP numbers than host names.

      #server 0.pool.ntp.org minpoll 8
      #server 1.pool.ntp.org minpoll 8
      #server 2.pool.ntp.org minpoll 8
      #server 3.pool.ntp.org minpoll 8

      server {{ updater_ntp_server }}
      server {{ updater_ntp_fallback_server }}

      # Look here for the admin password needed for chronyc.  The initial
      # password is generated by a random process at install time.  You may
      # change it if you wish.

      keyfile /etc/chrony/chrony.keys

      # Set runtime command key.  Note that if you change the key (not the
      # password) to anything other than 1 you will need to edit
      # /etc/ppp/ip-up.d/chrony, /etc/ppp/ip-down.d/chrony, /etc/init.d/chrony
      # and /etc/cron.weekly/chrony as these scripts use it to get the password.

      commandkey 1

      # I moved the driftfile to /var/lib/chrony to comply with the Debian
      # filesystem standard.

      driftfile /var/lib/chrony/chrony.drift

      # Comment this line out to turn off logging.

      log tracking measurements statistics
      logdir /var/log/chrony

      # Stop bad estimates upsetting machine clock.

      maxupdateskew 100.0

      # Dump measurements when daemon exits.

      dumponexit

      # Specify directory for dumping measurements.

      dumpdir /var/lib/chrony

      # Let computer be a server when it is unsynchronised.

      local stratum 10

      # Allow computers on the unrouted nets to use the server.

      #allow 10/8
      #allow 192.168/16
      #allow 172.16/12

      # This directive forces `chronyd' to send a message to syslog if it
      # makes a system clock adjustment larger than a threshold value in seconds.

      logchange 0.5

      # This directive defines an email address to which mail should be sent
      # if chronyd applies a correction exceeding a particular threshold to the
      # system clock.

      # mailonchange root@localhost 0.5

      # This directive tells chrony to regulate the real-time clock and tells it
      # Where to store related data.  It may not work on some newer motherboards
      # that use the HPET real-time clock.  It requires enhanced real-time
      # support in the kernel.  I've commented it out because with certain
      # combinations of motherboard and kernel it is reported to cause lockups.

      # rtcfile /var/lib/chrony/chrony.rtc

      # If the last line of this file reads 'rtconutc' chrony will assume that
      # the CMOS clock is on UTC (GMT).  If it reads '# rtconutc' or is absent
      # chrony will assume local time.  The line (if any) was written by the
      # chrony postinst based on what it found in /etc/default/rcS.  You may
      # change it if necessary.
      rtconutc
  register: systemd_chrony
  when: (is_chrony_exist.rc is defined and is_chrony_exist.rc == 0)
  tags:
    - updater
    - chrony

- name: restart chrony
  become: true
  ansible.builtin.service:
    name: chrony
    state: restarted
    enabled: true
  when: >
    (is_chrony_exist.rc is defined and is_chrony_exist.rc == 0)
    and systemd_chrony is defined
    and (systemd_chrony.changed is defined and systemd_chrony.changed | bool)

# ------------------------------------------------------------------------------
# SETUP ZFS
- name: setup zfs
  include_tasks: setup_zfs.yml
  when: updater_config.setup_zfs is defined and updater_config.setup_zfs | bool

# ------------------------------------------------------------------------------
# SETUP UNATTENDED-UPGRADES
- name: setup unattended-upgrades
  include_tasks: unattended-upgrades.yml
  when: updater_config.setup_unattended is defined and updater_config.setup_unattended | bool
